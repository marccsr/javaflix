/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package es.uah.vsnvmgr.javaflix.gui;

import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.FilenameFilter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import javax.imageio.ImageIO;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;

/**
 *
 * @author MARCOSPC
 */
public class ContenidoUsuario extends javax.swing.JFrame {

    /**
     * Creates new form ContenidoUsuario
     */
    public ContenidoUsuario() {
        initComponents();
    }
    

    /**
     *Permite indicar el dni del usuario
     * @param dni String
     */
    String dni = null;
    public void setDni(String dni){
        this.dni=dni;
    }
    
    /**
     *Abre el archivo con las calificaciones del usuario y comprueba si el contenido seleccionado en el jComboBox (El jComboBox varía en funcion del argumento, 1 para jComboBox2 o 2 para jComboBox3) ha sido calidicado. De ser así mostrara la calificacion correspondiente en el jComboBox, por lo contrario mantendra el valor por defecto.
     * @param jComboBox int
     */
    public void calificacion(int jComboBox){
    String cad;
    jComboBox4.setVisible(true);
        try{
        FileInputStream fis = new FileInputStream(".\\calificaciones\\"+"calif "+dni+".txt");
        InputStreamReader isr = new InputStreamReader(fis,"ISO-8859-1");
        BufferedReader br = new BufferedReader(isr);
        cad = br.readLine();
        if (jComboBox==1){
        for (String i:cad.split("-")){
        if (i.contains(jComboBox2.getItemAt(jComboBox2.getSelectedIndex()))){
            jComboBox4.setSelectedIndex(Character.getNumericValue(i.charAt(i.length()-1)));
        }
        else{jComboBox4.setSelectedIndex(0);}
        }
        }
        else{
        for (String i:cad.split("-")){
        if (i.contains(jComboBox3.getItemAt(jComboBox3.getSelectedIndex()))){
            jComboBox4.setSelectedIndex(Character.getNumericValue(i.charAt(i.length()-1)));
        }
        else{jComboBox4.setSelectedIndex(0);}
        br.close();
        }
        }
        }catch(IOException ioe){ioe.toString();}
    }
    
    /**
     *Lee el archivo txt del usuario, comprueba si el contenido seleccionado en el jComboBox (El cual varía en función del argumento, 1 para jComboBox2 y 2 para jComboBox3) está en su lista de favoritos y en funcion de ello cambia el texto del boton a Añadir o Eliminar.
     * @param jComboBox int
     */
    public void añadirOEliminar(int jComboBox){
    String cad;
        try{
        FileInputStream fis = new FileInputStream(".\\usuarios\\"+dni+".txt");
        InputStreamReader isr = new InputStreamReader(fis,"ISO-8859-1");
        BufferedReader br = new BufferedReader(isr);
        cad = br.readLine();
        List favoritos = Arrays.asList(cad.split("-")[8].replace("[","").replace("]","").toLowerCase().split(", "));
        if (jComboBox==1){
        if (favoritos.contains(jComboBox2.getItemAt(jComboBox2.getSelectedIndex()).toLowerCase())){
        jToggleButton1.setText("Eliminar de favoritos");
        }
        else {
        jToggleButton1.setText("Añadir a favoritos");
        }
        }
        else {
         if (favoritos.contains(jComboBox3.getItemAt(jComboBox3.getSelectedIndex()).toLowerCase())){
        jToggleButton1.setText("Eliminar de favoritos");
        }
        else {
        jToggleButton1.setText("Añadir a favoritos");
        }
        }
        br.close();
        }
        catch(IOException ioe){
            System.out.println(ioe);
        }
        catch (NullPointerException npe){
        System.out.println(npe);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jComboBox1 = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        jComboBox2 = new javax.swing.JComboBox<>();
        jComboBox3 = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jToggleButton1 = new javax.swing.JToggleButton();
        jComboBox4 = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(950, 650));
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(20, 20, 20));
        jPanel1.setMaximumSize(new java.awt.Dimension(950, 650));
        jPanel1.setMinimumSize(new java.awt.Dimension(950, 650));
        jPanel1.setPreferredSize(new java.awt.Dimension(950, 650));

        jLabel1.setMaximumSize(new java.awt.Dimension(191, 100));
        jLabel1.setMinimumSize(new java.awt.Dimension(191, 100));
        jLabel1.setPreferredSize(new java.awt.Dimension(191, 100));

        jTextField1.setMaximumSize(new java.awt.Dimension(210, 29));
        jTextField1.setMinimumSize(new java.awt.Dimension(210, 29));
        jTextField1.setPreferredSize(new java.awt.Dimension(210, 29));

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Sin filtro", "Año", "Genero", "Actor", "Favoritos" }));
        jComboBox1.setMaximumSize(new java.awt.Dimension(206, 29));
        jComboBox1.setMinimumSize(new java.awt.Dimension(206, 29));
        jComboBox1.setPreferredSize(new java.awt.Dimension(206, 29));

        jButton1.setText("Go");
        jButton1.setMaximumSize(new java.awt.Dimension(54, 29));
        jButton1.setMinimumSize(new java.awt.Dimension(54, 29));
        jButton1.setPreferredSize(new java.awt.Dimension(54, 29));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Resultados" }));
        jComboBox2.setMaximumSize(new java.awt.Dimension(270, 29));
        jComboBox2.setMinimumSize(new java.awt.Dimension(270, 29));
        jComboBox2.setPreferredSize(new java.awt.Dimension(270, 29));
        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });

        jComboBox3.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Subresultados" }));
        jComboBox3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox3ActionPerformed(evt);
            }
        });

        jLabel2.setMaximumSize(new java.awt.Dimension(210, 315));
        jLabel2.setMinimumSize(new java.awt.Dimension(210, 315));
        jLabel2.setPreferredSize(new java.awt.Dimension(210, 315));

        jTextArea1.setColumns(1000);
        jTextArea1.setRows(5);
        jTextArea1.setMaximumSize(new java.awt.Dimension(602, 315));
        jTextArea1.setMinimumSize(new java.awt.Dimension(602, 315));
        jScrollPane1.setViewportView(jTextArea1);

        jToggleButton1.setText("Añadir a favoritos");
        jToggleButton1.setMaximumSize(new java.awt.Dimension(200, 29));
        jToggleButton1.setMinimumSize(new java.awt.Dimension(200, 29));
        jToggleButton1.setPreferredSize(new java.awt.Dimension(200, 29));
        jToggleButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton1ActionPerformed(evt);
            }
        });

        jComboBox4.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Calificación", "1 Estrella", "2 Estrellas", "3 Estrellas", "4 Estrellas" }));
        jComboBox4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jComboBox4, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(113, 113, 113)
                .addComponent(jToggleButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addGap(410, 410, 410)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addGap(197, 197, 197)
                                .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 144, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(45, 45, 45)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                .addGap(51, 51, 51))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jToggleButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBox4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 36, Short.MAX_VALUE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(104, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /**
     * En función de lo introducido en el campo de texto y los filtros seleccionados busca y filtra los archivos txt de la carpeta contenido y añade sus nombres o filtros al jComboBox correspondiente.
     * @param evt 
     */
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        //RESETEO DE LA LISTA
        jComboBox2.setModel(new DefaultComboBoxModel());
        jComboBox3.setModel(new DefaultComboBoxModel());
        jComboBox2.addItem("Resultados");
        jComboBox3.addItem("Subresultados");
        
        //CASO 1 Se le da al boton sin buscar nada
        if (jTextField1.getText().equals("") && jComboBox1.getSelectedIndex()==0){}
        //CASO 2 Busqueda por palabra
        else if ((!(jTextField1.getText().equals("")))&& jComboBox1.getSelectedIndex()==0){
        File directorio = new File(".\\contenido");
        File[] listaContenido = directorio.listFiles(new FilenameFilter(){
        @Override
        public boolean accept(File directorio, String nombre){
        return nombre.toLowerCase().endsWith(".txt");
        }
        });
        for (File i:listaContenido){
        String cad;
        try{
        FileInputStream fis = new FileInputStream(".\\contenido\\"+i.getName());
        InputStreamReader isr = new InputStreamReader(fis,"ISO-8859-1");
        BufferedReader br = new BufferedReader(isr);
        cad = br.readLine();
        br.close();
        if (cad.split("-")[1].toLowerCase().contains(jTextField1.getText().toLowerCase())){
        jComboBox2.addItem(i.getName().replace(".txt", ""));
        }
        }catch(IOException ioe){}
        }
        }
        //CASO 3 Busqueda por palabra y filtro por Año
        else if ((!(jTextField1.getText().equals("")))&& jComboBox1.getSelectedIndex()==1) {
        File directorio = new File(".\\contenido");
        File[] listaContenido = directorio.listFiles(new FilenameFilter(){
        @Override
        public boolean accept(File directorio, String nombre){
        return nombre.toLowerCase().endsWith(".txt");
        }
        });
        for (File i:listaContenido){
        String cad;
        try{
        FileInputStream fis = new FileInputStream(".\\contenido\\"+i.getName());
        InputStreamReader isr = new InputStreamReader(fis,"ISO-8859-1");
        BufferedReader br = new BufferedReader(isr);
        cad = br.readLine();
        br.close();
        if (cad.split("-")[3].contains(jTextField1.getText().toLowerCase())){
        jComboBox2.addItem(i.getName().replace(".txt", ""));
        }
        }catch(IOException ioe){}
        }
        }
        //CASO 4 Busqueda por palabra y filtro por género
        else if ((!(jTextField1.getText().equals("")))&& jComboBox1.getSelectedIndex()==2) {
        File directorio = new File(".\\contenido");
        File[] listaContenido = directorio.listFiles(new FilenameFilter(){
        @Override
        public boolean accept(File directorio, String nombre){
        return nombre.toLowerCase().endsWith(".txt");
        }
        });
        for (File i:listaContenido){
        String cad;
        try{
        FileInputStream fis = new FileInputStream(".\\contenido\\"+i.getName());
        InputStreamReader isr = new InputStreamReader(fis,"ISO-8859-1");
        BufferedReader br = new BufferedReader(isr);
        cad = br.readLine();
        br.close();
        if (cad.split("-")[2].toLowerCase().contains(jTextField1.getText().toLowerCase())){
        jComboBox2.addItem(i.getName().replace(".txt", ""));
        }
        }catch(IOException ioe){}
        }
        }
        //CASO 5 Busqueda por palabra y filtro por actor
        else if ((!(jTextField1.getText().equals("")))&& jComboBox1.getSelectedIndex()==3) {
        File directorio = new File(".\\contenido");
        File[] listaContenido = directorio.listFiles(new FilenameFilter(){
        @Override
        public boolean accept(File directorio, String nombre){
        return nombre.toLowerCase().endsWith(".txt");
        }
        });
        for (File i:listaContenido){
        String cad;
        try{
        FileInputStream fis = new FileInputStream(".\\contenido\\"+i.getName());
        InputStreamReader isr = new InputStreamReader(fis,"ISO-8859-1");
        BufferedReader br = new BufferedReader(isr);
        cad = br.readLine();
        br.close();
        if (cad.split("-")[4].toLowerCase().contains(jTextField1.getText().toLowerCase())){
        jComboBox2.addItem(i.getName().replace(".txt", ""));
        }
        }catch(IOException ioe){}
        }
        }
        //CASO 6 Filtro por todos los años
        else if ((jTextField1.getText().equals(""))&& jComboBox1.getSelectedIndex()==1) {
        File directorio = new File(".\\contenido");
        File[] listaContenido = directorio.listFiles(new FilenameFilter(){
        @Override
        public boolean accept(File directorio, String nombre){
        return nombre.toLowerCase().endsWith(".txt");
        }
        });
        for (File i:listaContenido){
        String cad;
        try{
        FileInputStream fis = new FileInputStream(".\\contenido\\"+i.getName());
        InputStreamReader isr = new InputStreamReader(fis,"ISO-8859-1");
        BufferedReader br = new BufferedReader(isr);
        cad = br.readLine();
        br.close();
        if (!(jComboBox2.toString().contains(cad.split("-")[3]))){
        jComboBox2.addItem(cad.split("-")[3]);
        }
        }catch(IOException ioe){}
        }
        }
        //CASO 7 Filtro por todos los géneros
        else if ((jTextField1.getText().equals(""))&& jComboBox1.getSelectedIndex()==2) {
        File directorio = new File(".\\contenido");
        File[] listaContenido = directorio.listFiles(new FilenameFilter(){
        @Override
        public boolean accept(File directorio, String nombre){
        return nombre.toLowerCase().endsWith(".txt");
        }
        });
        for (File i:listaContenido){
        String cad;
        try{
        FileInputStream fis = new FileInputStream(".\\contenido\\"+i.getName());
        InputStreamReader isr = new InputStreamReader(fis,"ISO-8859-1");
        BufferedReader br = new BufferedReader(isr);
        cad = br.readLine();
        br.close();
        int items = jComboBox2.getItemCount();
        ArrayList<String> itemsArray = new ArrayList<String>();
        for (int item = 0; item < items; item++) {
            itemsArray.add(jComboBox2.getItemAt(item).toLowerCase());
        }
        if (!(itemsArray.contains(cad.split("-")[2].toLowerCase()))){
        jComboBox2.addItem(cad.split("-")[2]);
        }
        else {}
        }catch(IOException ioe){}
        }
        }
        //CASO 8 Filtro por todos los actores
        else if ((jTextField1.getText().equals(""))&& jComboBox1.getSelectedIndex()==3) {
        File directorio = new File(".\\contenido");
        File[] listaContenido = directorio.listFiles(new FilenameFilter(){
        @Override
        public boolean accept(File directorio, String nombre){
        return nombre.toLowerCase().endsWith(".txt");
        }
        });
        for (File i:listaContenido){
        String cad;
        try{
        FileInputStream fis = new FileInputStream(".\\contenido\\"+i.getName());
        InputStreamReader isr = new InputStreamReader(fis,"ISO-8859-1");
        BufferedReader br = new BufferedReader(isr);
        cad = br.readLine();
        br.close();
        String[] actores = cad.split("-")[4].replace("[", "").replace("]", "").split(", ");
        for (String s:actores){
        if (!(jComboBox2.toString().contains(s))){
        jComboBox2.addItem(s);
        }
        }
        }catch(IOException ioe){}
        }
        }
        //CASO 9 Filtro por todos los favoritos
        else if (jTextField1.getText().equals("") && jComboBox1.getSelectedIndex()==4){
        jComboBox2.addItem("Favoritos");
        }
        //CASO 10 Busqueda por palabra y filtro por favoritos
        else if ((!(jTextField1.getText().equals(""))) && jComboBox1.getSelectedIndex()==4){
        String cad;
        try{
        FileInputStream fis = new FileInputStream(".\\usuarios\\"+dni+".txt");
        InputStreamReader isr = new InputStreamReader(fis,"ISO-8859-1");
        BufferedReader br = new BufferedReader(isr);
        cad = br.readLine();
        ArrayList<String> favoritos = new ArrayList<String>(Arrays.asList(cad.split("-")[8].replace("[","").replace("]", "").split(", ")));
        for (String fav:favoritos){
        if (fav.toLowerCase().contains(jTextField1.getText().toLowerCase())){
            jComboBox2.addItem(fav);
        }   
        }
        br.close();
        }catch(IOException ioe){ioe.toString();}
        }
    }//GEN-LAST:event_jButton1ActionPerformed
    /**
     * Permite seleccionar el contenido que se desea ver o el filtro que se desea explorar en funcion del tipo de busqueda que se haya realizado.
     * Si se selecciona un contenido concreto mostrará su informacion en un campo de texto y se visualizará la imagen asociada.
     * Si se selecciona un filtro se buscarán los archivos txt en la carpeta contenido que contengan la informacion proporcionada y se añadiran al jComboBox de subresultados.
     * @param evt 
     */
    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2ActionPerformed
        // TODO add your handling code here:
        jLabel2.setIcon(null);
        jTextArea1.setText("");
        jComboBox3.setModel(new DefaultComboBoxModel());
        jComboBox3.addItem("Subresultados");
        //CASO 1 Filtrar por todos los años
        if ((jTextField1.getText().equals(""))&& jComboBox1.getSelectedIndex()==1){
        File directorio = new File(".\\contenido");
        File[] listaContenido = directorio.listFiles(new FilenameFilter(){
        @Override
        public boolean accept(File directorio, String nombre){
        return nombre.toLowerCase().endsWith(".txt");
        }
        });
        for (File i:listaContenido){
        String cad;
        try{
        FileInputStream fis = new FileInputStream(".\\contenido\\"+i.getName());
        InputStreamReader isr = new InputStreamReader(fis,"ISO-8859-1");
        BufferedReader br = new BufferedReader(isr);
        cad = br.readLine();
        br.close();
        if(cad.split("-")[3].equals(jComboBox2.getItemAt(jComboBox2.getSelectedIndex()))){
        jComboBox3.addItem(cad.split("-")[1]);
        }
        }catch(IOException ioe){}
        }
        }
        //CASO 2 Filtrar por todos los generos
        else if ((jTextField1.getText().equals(""))&& jComboBox1.getSelectedIndex()==2){
        File directorio = new File(".\\contenido");
        File[] listaContenido = directorio.listFiles(new FilenameFilter(){
        @Override
        public boolean accept(File directorio, String nombre){
        return nombre.toLowerCase().endsWith(".txt");
        }
        });
        for (File i:listaContenido){
        String cad;
        try{
        FileInputStream fis = new FileInputStream(".\\contenido\\"+i.getName());
        InputStreamReader isr = new InputStreamReader(fis,"ISO-8859-1");
        BufferedReader br = new BufferedReader(isr);
        cad = br.readLine();
        br.close();
        if(cad.split("-")[2].toLowerCase().equals(jComboBox2.getItemAt(jComboBox2.getSelectedIndex()).toLowerCase())){
        jComboBox3.addItem(cad.split("-")[1]);
        }
        }catch(IOException ioe){}
        }
        }
        //CASO 3 Filtrar por todos los Actores
        else if ((jTextField1.getText().equals(""))&& jComboBox1.getSelectedIndex()==3){
        File directorio = new File(".\\contenido");
        File[] listaContenido = directorio.listFiles(new FilenameFilter(){
        @Override
        public boolean accept(File directorio, String nombre){
        return nombre.toLowerCase().endsWith(".txt");
        }
        });
        for (File i:listaContenido){
        String cad;
        try{
        FileInputStream fis = new FileInputStream(".\\contenido\\"+i.getName());
        InputStreamReader isr = new InputStreamReader(fis,"ISO-8859-1");
        BufferedReader br = new BufferedReader(isr);
        cad = br.readLine();
        br.close();
        if(cad.split("-")[4].toLowerCase().contains(jComboBox2.getItemAt(jComboBox2.getSelectedIndex()).toLowerCase())){
        jComboBox3.addItem(cad.split("-")[1]);
        }
        }catch(IOException ioe){}
        }
        }
        //CASO 4 Filtrar por todos los favoritos
        else if ((jTextField1.getText().equals(""))&& jComboBox1.getSelectedIndex()==4){
        if (jComboBox2.getSelectedIndex()==1){
        File directorio = new File(".\\contenido");
        File[] listaContenido = directorio.listFiles(new FilenameFilter(){
        @Override
        public boolean accept(File directorio, String nombre){
        return nombre.toLowerCase().endsWith(".txt");
        }
        });
        for (File i:listaContenido){
        String cad;
        String cad2;
        try{
        FileInputStream fis = new FileInputStream(".\\contenido\\"+i.getName());
        InputStreamReader isr = new InputStreamReader(fis,"ISO-8859-1");
        BufferedReader br = new BufferedReader(isr);
        cad = br.readLine();
        FileInputStream fis2 = new FileInputStream(".\\usuarios\\"+dni+".txt");
        InputStreamReader isr2 = new InputStreamReader(fis2,"ISO-8859-1");
        BufferedReader br2 = new BufferedReader(isr2);
        cad2 = br2.readLine();
        if (cad2.split("-")[8].toLowerCase().contains(cad.split("-")[1].toLowerCase())) {
            jComboBox3.addItem(cad.split("-")[1]); 
        }
        br.close();
        br2.close();}catch (IOException ioe){System.out.println(ioe.toString());}
        }
        }
        }
            
        //CASO 5 Busqueda por palabra
        else{
        if (!(jTextField1.getText().equals(""))){
        int index = jComboBox2.getSelectedIndex();
        switch (index){
            case 0: break;
            default: mostrarContenido(1); 
            añadirOEliminar(1);
            calificacion(1);
            break;
        }
        }
        }
    }//GEN-LAST:event_jComboBox2ActionPerformed
    /**
     * Permite seleccionar el contenido que se desea visualizar, muestra sus datos y visualiza su imagen
     * @param evt 
     */
    private void jComboBox3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox3ActionPerformed
        // TODO add your handling code here:
    jLabel2.setIcon(null);
    jTextArea1.setText("");
    int index = jComboBox3.getSelectedIndex();
    switch (index){
        case 0: break;
        default: mostrarContenido(2); 
        añadirOEliminar(2);
        calificacion(2);
        break;
        }
    }//GEN-LAST:event_jComboBox3ActionPerformed
    /**
     * En función de lo que ponga en el botón añade o elimina el contenido de la lista de favoritos del usuario editando el archivo txt vinculado al usuario.
     * @param evt 
     */
    private void jToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton1ActionPerformed
        // TODO add your handling code here:
        if (!(jLabel2.getIcon()==null)){
        if (jToggleButton1.getText().equals("Añadir a favoritos")){
        String cad;
        try{
        FileInputStream fis = new FileInputStream(".\\usuarios\\"+dni+".txt");
        InputStreamReader isr = new InputStreamReader(fis,"ISO-8859-1");
        BufferedReader br = new BufferedReader(isr);
        cad = br.readLine();
        String cad2;
        cad2 = cad.split("-")[8].replace("[", "").replace("]","");
        ArrayList<String> cadArray = new ArrayList<String>(Arrays.asList(cad2.split(", ")));
        if (jComboBox3.getSelectedIndex()==0){
        cadArray.add(jComboBox2.getItemAt(jComboBox2.getSelectedIndex()));
        }
        else {
            cadArray.add(jComboBox3.getItemAt(jComboBox3.getSelectedIndex()));
        }
        cad=cad.replace(cad.split("-")[8],cadArray.toString());
        br.close();
        try { 
                PrintWriter data = new PrintWriter(new BufferedWriter(new FileWriter(".\\usuarios\\"+dni+".txt")));
                data.println(cad);
                data.close();
                
            } catch (IOException ioe) {
              System.out.println("Error IO: "+ioe.toString());
            }
        }
        catch(IOException ioe){
            System.out.println("Error IO: "+ioe.toString());
        }
        jToggleButton1.setText("Eliminar de favoritos");
        }
        else{
        String cad;
        try{
        FileInputStream fis = new FileInputStream(".\\usuarios\\"+dni+".txt");
        InputStreamReader isr = new InputStreamReader(fis,"ISO-8859-1");
        BufferedReader br = new BufferedReader(isr);
        cad = br.readLine();
        String cad2;
        cad2 = cad.split("-")[8].replace("[", "").replace("]","");
        ArrayList<String> cadArray = new ArrayList<String>(Arrays.asList(cad2.split(", ")));
       if (jComboBox3.getSelectedIndex()==0){
        cadArray.remove(jComboBox2.getItemAt(jComboBox2.getSelectedIndex()));
        }
        else {cadArray.remove(jComboBox3.getItemAt(jComboBox3.getSelectedIndex()));}
       cad=cad.replace(cad.split("-")[8],cadArray.toString());
       br.close();
       try { 
                PrintWriter data = new PrintWriter(new BufferedWriter(new FileWriter(".\\usuarios\\"+dni+".txt")));
                data.println(cad);
                data.close();
                
            } catch (IOException ioe) {
              System.out.println("Error IO: "+ioe.toString());
            }
        }catch (IOException ioe){System.out.println("Error IO: "+ioe.toString());}
        jToggleButton1.setText("Añadir a favoritos");
        }
        }
        else {}
    }//GEN-LAST:event_jToggleButton1ActionPerformed
    /**
     * Permite seleccionar la calificación que se le desée dar al contenido seleccionado en el jComboBox correspondiente y lo añade al archivo txt de calificaciones vinculado al usuario.
     * @param evt 
     */
    private void jComboBox4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox4ActionPerformed
        // TODO add your handling code here:
        if (jComboBox4.getSelectedIndex()==0){}
        else{
            
        if (!(jLabel2.getIcon()==null)){
        String cad;
        try{
        FileInputStream fis = new FileInputStream(".\\calificaciones\\calif "+dni+".txt");
        InputStreamReader isr = new InputStreamReader(fis,"ISO-8859-1");
        BufferedReader br = new BufferedReader(isr);
        cad = br.readLine();
        PrintWriter data = new PrintWriter(new BufferedWriter(new FileWriter(".\\calificaciones\\calif "+dni+".txt")));
        if (jComboBox3.getSelectedIndex()==0){
        if (!(cad.contains(jComboBox2.getItemAt(jComboBox2.getSelectedIndex())))){
        data.println("-"+jComboBox2.getItemAt(jComboBox2.getSelectedIndex())+Integer.toString(jComboBox4.getSelectedIndex()));
        }
        else{calificacion(1);}
        }
        else{
        if (!(cad.contains(jComboBox2.getItemAt(jComboBox3.getSelectedIndex())))){
        data.println("-"+jComboBox3.getItemAt(jComboBox3.getSelectedIndex())+Integer.toString(jComboBox4.getSelectedIndex()));
        }
        else{calificacion(2);}
        }
        data.close();
        br.close();
                
        }catch (IOException ioe) {System.out.println("Error IO: "+ioe.toString());}
        catch (NullPointerException npe){
            
        try{
        PrintWriter data = new PrintWriter(new BufferedWriter(new FileWriter(".\\calificaciones\\calif "+dni+".txt")));
        if (jComboBox3.getSelectedIndex()==0){
        data.println(jComboBox2.getItemAt(jComboBox2.getSelectedIndex())+Integer.toString(jComboBox4.getSelectedIndex()));
        }
        else{
        data.println(jComboBox3.getItemAt(jComboBox3.getSelectedIndex())+Integer.toString(jComboBox4.getSelectedIndex()));
        }
        data.close();
        }
        catch (IOException ioe) {System.out.println("Error IO: "+ioe.toString());}
        }
        }
        }
    }//GEN-LAST:event_jComboBox4ActionPerformed

/**
 * Muestra la información y visualiza la imagen del contenido seleccionado en el jComboBox correspondiente (jComboBox2 para el parámetro 1 y jComboBox3 para el parámetro 2) desde el archivo txt vinculado al contenido
 * @param jComboBox int
 */  
private void mostrarContenido(int jComboBox){
if (jComboBox == 1){
try{
    FileInputStream fis = new FileInputStream(".\\contenido\\"+jComboBox2.getItemAt(jComboBox2.getSelectedIndex())+".txt");
    InputStreamReader isr = new InputStreamReader(fis,"ISO-8859-1");
    BufferedReader br = new BufferedReader(isr);
    String cad;
    cad = br.readLine();  
    File imagenFile = new File(cad.split("-")[7]);
    BufferedImage imagen = null;
    try{
    imagen = ImageIO.read(imagenFile);
    }catch (IOException ioe){
    ioe.printStackTrace();
    }
    Image imagenResized = imagen.getScaledInstance(jLabel2.getWidth(), jLabel2.getHeight(), Image.SCALE_SMOOTH);
    ImageIcon icono = new ImageIcon(imagenResized);
    jLabel2.setIcon(icono);
    jLabel2.setVisible(true);
    if (cad.split("-")[0].equals("serie")){
    jTextArea1.setText("Nombre: "+cad.split("-")[1]+"\n"+"Genero: "+cad.split("-")[2]+"\n"+"Año: "+cad.split("-")[3]+"\n"+"Actores: "+cad.split("-")[4]+"\n"+"Temporadas: "+cad.split("-")[5]+"\n"+"Capitulos: "+cad.split("-")[6]+"\n"+"Sinopsis: "+cad.split("-")[8]+"\n");
    }
    else {jTextArea1.setText("Nombre: "+cad.split("-")[1]+"\n"+"Genero: "+cad.split("-")[2]+"\n"+"Año: "+cad.split("-")[3]+"\n"+"Actores: "+cad.split("-")[4]+"\n"+"Duracion: "+cad.split("-")[5]+"\n"+"Director: "+cad.split("-")[6]+"\n"+"Sinopsis: "+cad.split("-")[8]+"\n");}
    br.close();
    }catch(IOException ioe){System.out.println(ioe);}
}
if (jComboBox==2){
try{
    FileInputStream fis = new FileInputStream(".\\contenido\\"+jComboBox3.getItemAt(jComboBox3.getSelectedIndex())+".txt");
    InputStreamReader isr = new InputStreamReader(fis,"ISO-8859-1");
    BufferedReader br = new BufferedReader(isr);
    String cad;
    cad = br.readLine();  
    File imagenFile = new File(cad.split("-")[7]);
    BufferedImage imagen = null;
    try{
    imagen = ImageIO.read(imagenFile);
    }catch (IOException ioe){
    ioe.printStackTrace();
    }
    Image imagenResized = imagen.getScaledInstance(jLabel2.getWidth(), jLabel2.getHeight(), Image.SCALE_SMOOTH);
    ImageIcon icono = new ImageIcon(imagenResized);
    jLabel2.setIcon(icono);
    jLabel2.setVisible(true);
    if (cad.split("-")[0].equals("serie")){
    jTextArea1.setText("Nombre: "+cad.split("-")[1]+"\n"+"Genero: "+cad.split("-")[2]+"\n"+"Año: "+cad.split("-")[3]+"\n"+"Actores: "+cad.split("-")[4]+"\n"+"Temporadas: "+cad.split("-")[5]+"\n"+"Capitulos: "+cad.split("-")[6]+"\n"+"Sinopsis: "+cad.split("-")[8]+"\n");
    }
    else {jTextArea1.setText("Nombre: "+cad.split("-")[1]+"\n"+"Genero: "+cad.split("-")[2]+"\n"+"Año: "+cad.split("-")[3]+"\n"+"Actores: "+cad.split("-")[4]+"\n"+"Duracion: "+cad.split("-")[5]+"\n"+"Director: "+cad.split("-")[6]+"\n"+"Sinopsis: "+cad.split("-")[8]+"\n");}
    br.close();
    }catch(IOException ioe){System.out.println(ioe);}
}
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ContenidoUsuario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ContenidoUsuario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ContenidoUsuario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ContenidoUsuario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ContenidoUsuario().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JComboBox<String> jComboBox3;
    private javax.swing.JComboBox<String> jComboBox4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JToggleButton jToggleButton1;
    // End of variables declaration//GEN-END:variables
}
